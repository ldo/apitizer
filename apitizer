#!/usr/bin/python3
# -*- coding: utf-8
#+
# This script uses javap to decompile all classes in a .jar file.
# This is particularly useful for checking features of Android API versions
# against the claims at <http://developer.android.com/reference/packages.html>;
# the latter sometimes says a feature is only available from some version
# onwards, when in fact it’s available in earlier versions.
#
# To examine the features of a particular Android API version, use the script
# like this:
#
#     apitizer $ANDROID_SDK_ROOT/platforms/$TARGET/android.jar
#
# where $ANDROID_SDK_ROOT should be replaced with the path to the directory
# where you installed the SDK, and $TARGET should be replaced with the name
# of the subdirectory containing the definitions for the specified API version,
# e.g. “android-8” for API level 8 (Android 2.2). To examine the differences
# between two different API levels, pass both .jar files, e.g.
#
#     apitizer $ANDROID_SDK_ROOT/platforms/{$TARGET,$TARGET2}/android.jar
#
# (using Bash brace expansion to substitute $TARGET1 and $TARGET2 in turn).
#
# Copyright 2011-2013 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import fcntl
import subprocess
import termios
import zipfile
import getopt

class_suffix = ".class"

#+
# Mainline
#-

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    []
  )
if len(args) < 1 or len(args) > 2 :
    raise getopt.GetoptError("need exactly one or two args, the pathnames for the .jar files")
#end if
if sys.stdout.isatty() :
    pagercmd = os.environ.get("PAGER")
else :
    pagercmd = None
#end if
children = []
if pagercmd != None :
    savettyattr = termios.tcgetattr(sys.stdout)
    pager = subprocess.Popen \
      (
        args = pagercmd,
        shell = True,
        stdin = subprocess.PIPE,
      )
    pageout = pager.stdin
    children.append(pager)
else :
    savettyattr = None
    pager = None
    pageout = None
#end if
try :
    dumpers = []
    for jarname in args :
        dumpers.append \
          (
            subprocess.Popen
              (
                args =
                        ["javap", "-classpath", jarname]
                    +
                        sorted
                          (
                            ".".join(name[:- len(class_suffix)].split("/"))
                            for name in zipfile.ZipFile(jarname).namelist()
                            if name.endswith(class_suffix)
                          ),
                shell = False,
                stdout = (pageout, subprocess.PIPE)[len(args) > 1],
              )
          )
    #end if
    children.extend(dumpers)
    if len(args) > 1 :
        pass_fds = (dumpers[0].stdout.fileno(), dumpers[1].stdout.fileno())
        for fd in pass_fds :
            fcntl.fcntl(fd, fcntl.F_SETFD, fcntl.fcntl(fd, fcntl.F_GETFD) & ~fcntl.FD_CLOEXEC)
        #end for
        differ = subprocess.Popen \
          (
            args =
                [
                    "diff", "-F", "class", "-F", "interface", "-u",
                    "/dev/fd/%d" % dumpers[0].stdout.fileno(),
                    "/dev/fd/%d" % dumpers[1].stdout.fileno(),
                ],
            pass_fds = pass_fds,
            shell = False,
            stdout = pageout,
          )
        children.append(differ)
    #end if
    if pager != None :
        pageout.close() # so pager sees EOF when child feeding into it terminates
    #end if
    for child in children :
        status = child.wait()
        if child == pager :
            pager = None
        #end if
        if status != 0 :
            raise RuntimeError("child returned status %d" % status)
        #end if
    #end for
finally :
    if pager != None :
        pager.kill() # ensure it properly restores terminal settings
    #end if
    # Above doesn't seem to be enough, so I do my own restoration
    if savettyattr != None :
        termios.tcsetattr(sys.stdout, termios.TCSAFLUSH, savettyattr)
    #end if
#end try
